/*
 * Copyright 2018-2020 Digi International Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/dts-v1/;

/*
 * The device tree for the ConnectCore 8X SBC Express is made out of different
 * device tree include files that contain the common hardware of all variants.
 *
 * A U-Boot boot script applies additional overlays for variant-specific
 * hardware, including:
 *  - Overlay for ConnectCore 8X variants with a quad-core CPU
 *  - Overlay for ConnectCore 8X variants with Wi-Fi
 *  - Overlay for ConnectCore 8X variants with Bluetooth
 *
 * If you are not going to use Digi's boot script, you can:
 *  - Manually add the overlays to U-Boot's "overlays" environment variable
 *  - Apply the overlay fragments manually to this device tree, if you don't
 *    use Digi U-Boot's "dboot" command
 */
/* i.MX8DX CPU */
#include "../freescale/imx8dx.dtsi"
/* Digi ConnectCore 8X */
#include "ccimx8x.dtsi"
/* Digi ConnectCore 8X SBC Express */
#include "ccimx8x-sbc-express.dtsi"

/*
 * i.MX8X ADC channels on Raspberry Pi Expansion connector:
 *  - ADC_IN0 (channel 0)
 *  - ADC_IN1 (channel 1)
 * Include in digi,adc-ch-list the ADC channels (from 0 to 5) that you want to
 * enable. Note that the iomux has to be configured accordingly in pinctrl_adc0
 * to configure the pads for ADC operation. Make sure to remove them from
 * pinctrl_expansion where they may already be configured with another use.
 */
&adc0 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_adc0>;
	digi,adc-ch-list = <0>;
	status = "okay";
};

&dc0_dpr1_channel1 {
	status = "okay";
};

&dc0_dpr1_channel2 {
	status = "okay";
};

&dc0_dpr1_channel3 {
	status = "okay";
};

&dc0_dpr2_channel1 {
	status = "okay";
};

&dc0_dpr2_channel2 {
	status = "okay";
};

&dc0_dpr2_channel3 {
	status = "okay";
};

&dpu1 {
	status = "okay";
};

&fec1 {
	status = "okay";
};

/*
 * CAN0 port conflicts with LPUART0 RTS/CTS lines.
 * Before enabling the port you need to configure
 * lpuart0 node as 2 wires.
 */
&flexcan1 {
	status = "disabled";
};

/*
 * CAN1 port's pins are configured as GPIO by
 * default. Before enabling the port, you must remove
 * the IMX8QXP_FLEXCAN1_RX_LSIO_GPIO1_IO17 and
 * IMX8QXP_FLEXCAN1_TX_LSIO_GPIO1_IO18 entries from
 * the pinctrl_expansion node.
 */
&flexcan2 {
	status = "disabled";
};

/*
 * CAN2 port's pins are configured as GPIO by
 * default. Before enabling the port, you must remove
 * the IMX8QXP_FLEXCAN2_RX_LSIO_GPIO1_IO19 and
 * IMX8QXP_FLEXCAN2_TX_LSIO_GPIO1_IO20 entries from
 * the pinctrl_expansion node.
 */
&flexcan3 {
	status = "disabled";
};

/*
 * On the CC8X SBC, an inconsistent reset sequence makes
 * the Goodix display's touch controller respond to two I2C
 * addresses: 0x14 and 0x5D. To make sure the touchscreen
 * works every time, the touch controller's description must
 * be duplicated for both addresses.
 */
&goodix_touch1 {
	status = "okay";
};

&goodix_touch2 {
	status = "okay";
};

&gpu_3d0 {
	status = "okay";
};

/* I2C2 available on Raspberry Pi expansion header */
&i2c2 {
	status = "okay";
};

/* I2C3 available on Raspberry Pi expansion header */
&i2c3 {
	status = "okay";
};

/* MIPI-DSI0 I2C available on LVDS connector */
&i2c0_mipi_lvds0 {
	status = "okay";
};

&imx8_gpu_ss {
	status = "okay";
};

&cm40_intmux {
	status = "okay";
};

&isi_0 {
	status = "okay";
};

&isi_1 {
	status = "okay";
};

&isi_2 {
	status = "okay";
};

&isi_3 {
	status = "okay";
};

&ldb1 {
	status = "okay";
};

&ldb1_phy {
	status = "okay";
};

&lvds0 {
	status = "okay";
};

&lvds_backlight0 {
	status = "okay";
};

&lvds0_panel {
	status = "okay";
};

&pwm_mipi_lvds0 {
	status = "okay";
};

/* LPSPI3 on Raspberry Pi expansion header */
&lpspi3 {
	status = "okay";

	/*
	 * Add your slave devices here. Next is an example of spidev.
	 */
	spidev@0 {
		compatible = "rohm,dh2228fv";
		reg = <0>;
		spi-max-frequency = <4000000>;
	};
};

/* LPUART0 on XBee socket */
&lpuart0 {
	/* RTS/CTS lines multiplexed with CAN0 */
	pinctrl-0 = <&pinctrl_lpuart0_4wires>, <&pinctrl_xbee_gpios>;
	/* Comment the line above and uncomment the next one to use 2-wires */
	//pinctrl-0 = <&pinctrl_lpuart0_2wires>, <&pinctrl_xbee_gpios>;
	status = "okay";
};

/* Console */
&lpuart2 {
	status = "okay";
};

/* LPUART3 on expansion header */
&lpuart3 {
	status = "okay";
};

/*
 * Uncomment to enable MCA ADC channels on Rasberry Pi Expansion connector:
 *  - MCA_IO1 (channel 1)
 *  - MCA_IO2 (channel 2)
 *  - MCA_IO3 (channel 3)
 *  - MCA_IO4 (channel 4)
 *  - MCA_IO5 (channel 5)
 *  - MCA_IO6 (channel 6)
 *  - MCA_IO7 (channel 7)
 *  - MCA_IO8 (channel 8)
 * Edit adc-ch-list to include the ADC channels that you want to enable.
 */
// &mca_adc {
//	digi,adc-ch-list = <1 2 3 4 5 6 7 8>;
//	digi,adc-vref = <3000000>;
// };

/*
 * Uncomment to Enable Tamper detection. There are 2 digital (0 and 1) and 2
 * analog (2 and 3) tamper interfaces.
 */
//&mca_tamper {
//	digi,tamper-if-list = <0 1 2 3>;
//};

/* Configure MCA UARTs. */
&mca_uart {
	status = "okay";
};

/* Assign the IO pins (see bindings) and change status to okay */
&mca_uart0 {
	iopins-names = "rx", "tx";
	iopins = <9 10>;
	status = "disabled";
};

/* Assign the IO pins (see bindings) and change status to okay */
&mca_uart2 {
	iopins-names = "rx", "tx";
	iopins = <2 1>;
	status = "disabled";
};

/* USB_OTG1 */
&usbotg1 {
	/*
	 * To configure this USB controller as a device set dr_mode to "otg";
	 * to configure it as a host set to "host" instead.
	 */
	dr_mode = "host";
	status = "okay";
};

/* USB_OTG2 */
&usbotg3_cdns3 {
	status = "okay";
};

&usbotg3 {
	status = "okay";
};

&usbphy1 {
	status = "okay";
};

&usb3_phy {
	status = "okay";
};

/* Micro SD card */
&usdhc2 {
	status = "okay";
};

&vpu_core0 {
	status = "okay";
};

&vpu_core1 {
	status = "okay";
};

/* IOMUX */
&iomuxc {
	pinctrl-0 = <&pinctrl_hog>, <&pinctrl_expansion>;

	/* Raspberry Pi Expansion Connector */
	pinctrl_expansion: expansiongrp {
		fsl,pins = <
			/*
			 * Comment the pads you wish to use on any
			 * device driver, and uncomment the ones you
			 * want to use as GPIO (requires disabling the
			 * driver that manages them).
			 */
			IMX8QXP_MIPI_DSI0_GPIO0_01_LSIO_GPIO1_IO28	0x06000020
			IMX8QXP_USDHC1_WP_LSIO_GPIO4_IO21		0x06000020
			IMX8QXP_USDHC1_CD_B_LSIO_GPIO4_IO22	0x06000020
			IMX8QXP_MIPI_DSI1_I2C0_SCL_LSIO_GPIO1_IO29	0x06000020
			IMX8QXP_MIPI_DSI1_I2C0_SDA_LSIO_GPIO1_IO30	0x06000020
			IMX8QXP_QSPI0A_SS1_B_LSIO_GPIO3_IO15	0x06000020
			IMX8QXP_USDHC1_VSELECT_LSIO_GPIO4_IO20	0x06000020
			IMX8QXP_ENET0_RGMII_RXC_LSIO_GPIO5_IO03	0x06000020

			/* Remove these if you wish to use the flexcan2 interface */
			IMX8QXP_FLEXCAN1_RX_LSIO_GPIO1_IO17	0x06000020
			IMX8QXP_FLEXCAN1_TX_LSIO_GPIO1_IO18	0x06000020

			/* Remove these if you wish to use the flexcan3 interface */
			IMX8QXP_FLEXCAN2_RX_LSIO_GPIO1_IO19	0x06000020
			IMX8QXP_FLEXCAN2_TX_LSIO_GPIO1_IO20	0x06000020
		>;
	};

	/* Uncomment the pads you wish to use as ADCs */
	pinctrl_adc0: adc0grp {
		fsl,pins = <
			/* ADC_IN0 */
			IMX8QXP_ADC_IN0_ADMA_ADC_IN0		0xc0000060
	//		/* ADC_IN1 */
	//		IMX8QXP_ADC_IN1_ADMA_ADC_IN1		0xc0000060
		>;
	};
};
